#!/usr/bin/env python3
"""Generates the per-site /[DOMAIN].json files served on map.snarfed.org.

Usage: make_site_files.py sites.json[.gz] social_graph_links.json[.gz]

where sites.json[.gz] is generated by sites_to_bigquery.py, and
social_graph_links.json[.gz] is this table:
https://bigquery.cloud.google.com/table/indie-map:indiemap.social_graph_links
created by the query 'Social graph: links by mf2, outbound':
https://bigquery.cloud.google.com/savedquery/464705913036:c1dce91deaed46a5bcf3452e5b781542
"""
from collections import defaultdict
import gzip
from itertools import chain
import json
import sys

MF2_WEIGHTS = defaultdict(lambda: .2, {
    'u-in-reply-to': 1.,
    'u-invitee': 1.,
    'u-quotation-of': .6,
    'u-repost-of': .6,
    'u-like-of': .4,
    'u-favorite-of': .4,
    'u-bookmark-of': .4,
})
DIRECTION_WEIGHTS = {
    'outbound': 1.,
    'inbound': .5,
}


def make(sites_file, links_file):
    # {from_domain: {to_domain: {'outbound': {mf2_class: number, ...},
    #                            'inbound':  {mf2_class: number, ...}}}}
    links = defaultdict(lambda: defaultdict(lambda: {
        'inbound': defaultdict(int), 'outbound': defaultdict(int)}))

    # {domain: number of links}
    outbound_totals = defaultdict(int)
    inbound_totals = defaultdict(int)

    # accumulate links
    for link in links_file:
        link = json.loads(link)
        from_domain = link['from_domain']
        to_domain = link['to_domain']
        num = int(link['num'])
        mf2 = link.get('mf2_class')

        links[from_domain][to_domain]['outbound'][mf2] += num
        links[to_domain][from_domain]['inbound'][mf2] += num
        outbound_totals[from_domain] += num
        inbound_totals[to_domain] += num

    # calculate scores
    for domains in links.values():
        for stats in domains.values():
            score = 0
            for direction, counts in stats.items():
                for mf2, count in counts.items():
                    score += count * MF2_WEIGHTS[mf2] * DIRECTION_WEIGHTS[direction]
            stats['score'] = score

    # emit each site
    for site in sites_file:
        site = json.loads(site)
        domain = site['domain']
        site.update({
            'outbound_links': outbound_totals[domain],
            'inbound_links': inbound_totals[domain],
            'links': links.pop(domain),
        })

        yield site

    for domain, domain_stats in links.items():
        yield {
            'domain': domain,
            'outbound_links': outbound_totals[domain],
            'inbound_links': inbound_totals[domain],
            'links': domain_stats,
        }


def open_fn(path, mode):
    return (gzip.open if path.endswith('.gz') else open)(
        path, mode, encoding='utf-8')


def main():
    with open_fn(sys.argv[1], 'rt') as sites, \
         open_fn(sys.argv[2], 'rt') as links, \
         open_fn('sites.out.json.gz', 'wt') as out:
        for site in make(sites, links):
            json.dumps(site, out, ensure_ascii=False)
            print(file=out)


if __name__ == '__main__':
    main()
